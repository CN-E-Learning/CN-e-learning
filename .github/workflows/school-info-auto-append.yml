# 学校信息自动填报工作流
name: 学校信息自动填报

on:
  issues:
    types: [labeled]

# 设置必要的权限
permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  append-school-info:
    runs-on: ubuntu-latest
    if: github.event.label.name == '审核通过' && contains(github.event.issue.labels.*.name, '学校信息填报')
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 追加学校信息到表格
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const filePath = 'docs/school/index.md';
            const issue = context.payload.issue;
            
            // 验证issue是否存在
            if (!issue || !issue.body) {
              core.setFailed('Issue内容为空');
              return;
            }
            
            // 只取每个字段下第一个非空行
            function extractField(body, field) {
              const reg = new RegExp(`### ${field}\\s*([\\s\\S]*?)(?=\\n###|$)`, 'm');
              const match = body.match(reg);
              if (!match) return '';
              return match[1].split('\n').map(s => s.trim()).filter(Boolean)[0] || '';
            }

            const name = extractField(issue.body, '学校名称');
            const location = extractField(issue.body, '地区');
            const type = extractField(issue.body, '学校类型');
            const provinceCode = extractField(issue.body, '省份');
            const coordinates = extractField(issue.body, '经纬度坐标');
            
            // 验证必要字段
            if (!location || !type || !name || !provinceCode) {
              core.setFailed('缺少必要字段：school_location、school_type、school_name、province_code');
              return;
            }
            
            // 验证文件是否存在
            if (!fs.existsSync(filePath)) {
              core.setFailed(`文件不存在: ${filePath}`);
              return;
            }
            
            try {
              let content = fs.readFileSync(filePath, 'utf8');
              
              // 检查是否已存在相同学校
              if (content.includes(`[${name}]`)) {
                core.setOutput('result', '学校已存在，跳过添加');
                return;
              }
              
              // 确保文件以换行结尾
              if (!content.endsWith('\n')) {
                content += '\n';
              }
              // 直接在文件末尾追加新行
              const newRow = `| ${location} | ${type} | [${name}](/school/list/${name}) |\n`;
              content += newRow;
              fs.writeFileSync(filePath, content, 'utf8');
              
              core.setOutput('result', '学校信息添加成功');
              core.setOutput('school_name', name);
              core.setOutput('province_code', provinceCode);
              core.setOutput('coordinates', coordinates);
            } catch (error) {
              core.setFailed(`处理文件时出错: ${error.message}`);
            }
              
      - name: 新建学校详情文件
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const issue = context.payload.issue;
            // 字段提取函数，与前面保持一致
            function extractField(body, field) {
              const reg = new RegExp(`### ${field}\\s*([\\s\\S]*?)(?=\\n###|$)`, 'm');
              const match = body.match(reg);
              if (!match) return '';
              return match[1].split('\n').map(s => s.trim()).filter(Boolean)[0] || '';
            }
            const name = extractField(issue.body, '学校名称');
            if (!name) {
              core.setFailed('未能提取学校名称，无法创建详情文件');
              return;
            }
            const fileDir = 'docs/school/list';
            const filePath = path.join(fileDir, `${name}.md`);
            if (!fs.existsSync(fileDir)) {
              fs.mkdirSync(fileDir, { recursive: true });
            }
            const content = `# ${name}\n\n${issue.body}`;
            fs.writeFileSync(filePath, content, 'utf8');

      - name: 更新省份数据统计
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const issue = context.payload.issue;
            
            // 字段提取函数
            function extractField(body, field) {
              const reg = new RegExp(`### ${field}\\s*([\\s\\S]*?)(?=\\n###|$)`, 'm');
              const match = body.match(reg);
              if (!match) return '';
              return match[1].split('\n').map(s => s.trim()).filter(Boolean)[0] || '';
            }
            
            const name = extractField(issue.body, '学校名称');
            const location = extractField(issue.body, '地区');
            const type = extractField(issue.body, '学校类型');
            const provinceCodeRaw = extractField(issue.body, '省份');
            const coordinates = extractField(issue.body, '经纬度坐标');
            
            // 提取省份编号（格式：110000 - 北京市）
            const provinceCode = provinceCodeRaw.split(' - ')[0];
            
            if (!provinceCode || !name) {
              core.setFailed('缺少必要的省份数据字段');
              return;
            }
            
            const dataFilePath = 'docs/school/province-data.json';
            
            try {
              // 读取现有数据
              let provinceData = {};
              if (fs.existsSync(dataFilePath)) {
                const rawData = fs.readFileSync(dataFilePath, 'utf8');
                provinceData = JSON.parse(rawData);
              } else {
                // 初始化数据结构
                provinceData = {
                  lastUpdated: new Date().toISOString(),
                  totalSchools: 0,
                  provinces: {}
                };
              }
              
              // 确保省份数据结构存在
              if (!provinceData.provinces[provinceCode]) {
                provinceData.provinces[provinceCode] = {
                  name: provinceCodeRaw.split(' - ')[1] || '',
                  count: 0,
                  schools: []
                };
              }
              
              // 检查学校是否已存在
              const existingSchool = provinceData.provinces[provinceCode].schools.find(
                school => school.name === name
              );
              
              if (!existingSchool) {
                // 解析坐标（如果提供的话）
                let coordinatesArray = null;
                if (coordinates && coordinates.trim()) {
                  try {
                    const [lng, lat] = coordinates.split(',').map(coord => parseFloat(coord.trim()));
                    if (!isNaN(lng) && !isNaN(lat)) {
                      coordinatesArray = [lng, lat];
                    }
                  } catch (error) {
                    console.log('坐标解析失败，将使用null值');
                  }
                }
                
                // 添加新学校
                provinceData.provinces[provinceCode].schools.push({
                  name: name,
                  location: location,
                  type: type,
                  coordinates: coordinatesArray,
                  addedDate: new Date().toISOString()
                });
                
                // 更新计数
                provinceData.provinces[provinceCode].count++;
                provinceData.totalSchools++;
                provinceData.lastUpdated = new Date().toISOString();
                
                // 写入文件
                fs.writeFileSync(dataFilePath, JSON.stringify(provinceData, null, 2), 'utf8');
                
                core.setOutput('result', `省份数据更新成功，${provinceCodeRaw} 新增学校：${name}`);
              } else {
                core.setOutput('result', '学校已存在于省份数据中，跳过更新');
              }
              
            } catch (error) {
              core.setFailed(`更新省份数据时出错: ${error.message}`);
            }

      - name: 生成热力图数据
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const dataFilePath = 'docs/school/province-data.json';
              const heatmapDataPath = 'docs/school/heatmap-data.json';
              
              if (!fs.existsSync(dataFilePath)) {
                core.setFailed('省份数据文件不存在');
                return;
              }
              
              const provinceData = JSON.parse(fs.readFileSync(dataFilePath, 'utf8'));
              const provinceMappingPath = 'docs/school/province-mapping.json';
              
              let provinceMapping = {};
              if (fs.existsSync(provinceMappingPath)) {
                provinceMapping = JSON.parse(fs.readFileSync(provinceMappingPath, 'utf8'));
              }
              
              // 生成热力图数据
              const heatmapData = {
                lastUpdated: provinceData.lastUpdated,
                totalSchools: provinceData.totalSchools,
                data: []
              };
              
              // 转换为热力图格式
              Object.keys(provinceData.provinces).forEach(code => {
                const province = provinceData.provinces[code];
                if (province.count > 0) {
                  const mapping = provinceMapping[code];
                  if (mapping && mapping.center) {
                    heatmapData.data.push({
                      name: province.name,
                      code: code,
                      value: province.count,
                      center: mapping.center,
                      schools: province.schools.map(school => ({
                        name: school.name,
                        coordinates: school.coordinates || null,
                        type: school.type
                      }))
                    });
                  }
                }
              });
              
              // 写入热力图数据文件
              fs.writeFileSync(heatmapDataPath, JSON.stringify(heatmapData, null, 2), 'utf8');
              
              core.setOutput('result', `热力图数据生成成功，包含 ${heatmapData.data.length} 个省份的数据`);
              
            } catch (error) {
              core.setFailed(`生成热力图数据时出错: ${error.message}`);
            }

      - name: 更新all-schools.md文件
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const issue = context.payload.issue;
            
            // 字段提取函数
            function extractField(body, field) {
              const reg = new RegExp(`### ${field}\\s*([\\s\\S]*?)(?=\\n###|$)`, 'm');
              const match = body.match(reg);
              if (!match) return '';
              return match[1].split('\n').map(s => s.trim()).filter(Boolean)[0] || '';
            }
            
            const name = extractField(issue.body, '学校名称');
            if (!name) {
              core.setFailed('未能提取学校名称，无法更新all-schools.md');
              return;
            }
            
            const allSchoolsPath = 'docs/school/all-schools.md';
            
            try {
              let content = fs.readFileSync(allSchoolsPath, 'utf8');
              
              // 检查是否已存在该学校
              if (content.includes(`## ${name}`)) {
                console.log('学校已存在于all-schools.md中，跳过添加');
                return;
              }
              
              // 1. 更新目录导航
              const navigationRegex = /(## 目录导航\s*\n)([\s\S]*?)(\n---)/;
              const navigationMatch = content.match(navigationRegex);
              
              if (navigationMatch) {
                const currentNavigation = navigationMatch[2];
                const lines = currentNavigation.split('\n').filter(line => line.trim());
                
                // 计算新的序号
                const newNumber = lines.length + 1;
                const newNavigationItem = `${newNumber}. [${name}](#${name.replace(/[（）()]/g, '').replace(/\s+/g, '')})`;
                
                // 添加新的导航项
                lines.push(newNavigationItem);
                const updatedNavigation = lines.join('\n');
                
                content = content.replace(navigationRegex, `$1${updatedNavigation}$3`);
              }
              
              // 2. 在文档末尾添加学校详细信息
              const schoolContent = `\n---\n\n## ${name}\n\n${issue.body}\n\n[↑ 返回目录](#目录导航)\n`;
              content += schoolContent;
              
              // 写入文件
              fs.writeFileSync(allSchoolsPath, content, 'utf8');
              console.log(`成功更新all-schools.md，添加了学校：${name}`);
              
            } catch (error) {
              core.setFailed(`更新all-schools.md时出错: ${error.message}`);
            }

      - name: 提交更改
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: '自动追加学校信息到表格及更新热力图数据'
          file_pattern: 'docs/school/index.md docs/school/list/*.md docs/school/all-schools.md docs/school/province-data.json docs/school/heatmap-data.json'
          commit_user_name: 'github-actions[bot]'
          commit_user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_author: ${{ github.event.issue.user.name || github.event.issue.user.login }} <${{ github.event.issue.user.id }}+${{ github.event.issue.user.login }}@users.noreply.github.com>

      - name: 更新标签并关闭 Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            // 添加"添加完成"标签
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number,
              labels: ['添加完成']
            });
            // 移除"等待添加"标签（如果有）
            try {
              await github.rest.issues.removeLabel({
                owner,
                repo,
                issue_number,
                name: '等待添加'
              });
            } catch (e) {
              // 如果没有该标签则忽略
            }
            // 关闭 issue
            await github.rest.issues.update({
              owner,
              repo,
              issue_number,
              state: 'closed'
            });
